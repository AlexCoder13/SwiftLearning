import Foundation

// MARK: - MVVM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

/*
 –û–ø–∏—Å–∞–Ω–∏–µ:
 MVVM (Model-View-ViewModel) ‚Äî —ç—Ç–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–¥–µ–ª—è–µ—Ç –ª–æ–≥–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: Model, View –∏ ViewModel. –û–Ω –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ø—É–ª—è—Ä–µ–Ω –≤ iOS-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ö–æ—Ä–æ—à–µ–π —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π.

 üî• –ó–∞—á–µ–º –Ω—É–∂–µ–Ω MVVM?
 1. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π (–ª–æ–≥–∏–∫–∞ –æ—Ç–¥–µ–ª–µ–Ω–∞ –æ—Ç UI)
 2. –£–ø—Ä–æ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (ViewModel –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ View)
 3. –ì–∏–±–∫–æ—Å—Ç—å (–ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å UI –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏)
 4. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –±–∏–Ω–¥–∏–Ω–≥–∞ (–¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç UI)
 */

// 1. Model (–î–∞–Ω–Ω—ã–µ)
// 1. –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
struct User {
    let id: Int
    let name: String
    let email: String
}
// 2. –°–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
protocol UserServiceProtocol {
    func fetchUser(completion: @escaping (Result<User, Error>) -> Void)
}
// 3. –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
class UserService: UserServiceProtocol {
    func fetchUser(completion: @escaping (Result<User, Error>) -> Void) {
        // –ó–¥–µ—Å—å –º–æ–≥ –±—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å
        let mockUser = User(id: 1, name: "John Doe", email: "john@example.com")
        completion(.success(mockUser))
    }
}

// 2. ViewModel (–õ–æ–≥–∏–∫–∞)
// 1. –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è ViewModel (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
protocol UserViewModelProtocol {
    var userName: String { get }
    var userEmail: String { get }
    func loadUser()
}
// 2. –†–µ–∞–ª—å–Ω–∞—è ViewModel
class UserViewModel: UserViewModelProtocol {
    // 3. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ (Dependency Injection)
    private let userService: UserServiceProtocol
    // 4. –î–∞–Ω–Ω—ã–µ –¥–ª—è View
    private(set) var userName: String = "Loading..."
    private(set) var userEmail: String = "Loading..."
    // 5. –ó–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è View
    var onUpdate: (() -> Void)?
    // 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    init(userService: UserServiceProtocol) {
        self.userService = userService
    }
    // 7. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func loadUser() {
        userService.fetchUser { [weak self] result in
            switch result {
            case .success(let user):
                // 8. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self?.userName = user.name
                self?.userEmail = user.email
                // 9. –£–≤–µ–¥–æ–º–ª—è–µ–º View
                self?.onUpdate?()
            case .failure(let error):
                print("Error: \(error)")
            }
        }
    }
}

// 3. View (ViewController)
class UserViewController: UIViewController {
    // 1. UI-—ç–ª–µ–º–µ–Ω—Ç—ã
    private let nameLabel = UILabel()
    private let emailLabel = UILabel()
    private let loadButton = UIButton(type: .system)
    // 2. ViewModel
    private let viewModel: UserViewModelProtocol
    // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º ViewModel (Dependency Injection)
    init(viewModel: UserViewModelProtocol) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupBindings()
        viewModel.loadUser()
    }
    // 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
    private func setupUI() {
        view.backgroundColor = .white
        
        nameLabel.translatesAutoresizingMaskIntoConstraints = false
        emailLabel.translatesAutoresizingMaskIntoConstraints = false
        loadButton.translatesAutoresizingMaskIntoConstraints = false
        
        loadButton.setTitle("Load User", for: .normal)
        loadButton.addTarget(self, action: #selector(didTapLoadButton), for: .touchUpInside)
        
        view.addSubview(nameLabel)
        view.addSubview(emailLabel)
        view.addSubview(loadButton)
        
        NSLayoutConstraint.activate([
            nameLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            nameLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 50),
            
            emailLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            emailLabel.topAnchor.constraint(equalTo: nameLabel.bottomAnchor, constant: 20),
            
            loadButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            loadButton.topAnchor.constraint(equalTo: emailLabel.bottomAnchor, constant: 40)
        ])
    }
    // 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏–Ω–¥–∏–Ω–≥–∞ —Å ViewModel
    private func setupBindings() {
        viewModel.onUpdate = { [weak self] in
            self?.nameLabel.text = self?.viewModel.userName
            self?.emailLabel.text = self?.viewModel.userEmail
        }
    }
    // 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    @objc private func didTapLoadButton() {
        viewModel.loadUser()
    }
}

// 
